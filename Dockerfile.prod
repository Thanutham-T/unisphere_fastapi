# Multi-stage build for production
FROM debian:sid-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-dev python3-pip python3-venv \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3 -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Install Poetry
RUN pip install --no-cache-dir wheel poetry

# Set work directory
WORKDIR /build

# Copy dependency files
COPY poetry.lock pyproject.toml README.md ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --only main --no-interaction --no-root

# Copy application code
COPY . .

# Install the application
RUN poetry install --only main --no-interaction

# Production stage
FROM python:3.13-slim

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install only main dependencies (runtime)
RUN poetry config virtualenvs.create false \
    && poetry install --only main --no-interaction --no-root

# Copy application code
COPY unisphere ./unisphere
COPY README.md .

# Create upload/data folder
RUN mkdir -p /app/data /var/app/uploads

# Expose port
EXPOSE 8000

# Run FastAPI via Poetry (guarantees uvicorn is found)
CMD ["poetry", "run", "uvicorn", "unisphere.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
