services:
  unisphere-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: unisphere:latest
    container_name: unisphere-production
    restart: unless-stopped
    env_file:
      - ./.env.prod
    volumes:
      - ./data/uploads:/var/app/uploads:rw
      - ./logs:/app/logs:rw
    networks:
      - unisphere-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres-prod:
    image: postgres:17-alpine
    container_name: unisphere-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - unisphere-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-prod:
    image: redis:7-alpine
    container_name: unisphere-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - unisphere-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: unisphere-nginx
    restart: on-failure
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/static:/usr/share/nginx/html/static
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - unisphere-prod
    networks:
      - unisphere-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${NGINX_PORT} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  unisphere-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
